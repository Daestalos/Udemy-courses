"use strict";

const num = new Number(3);
console.log(num); // = [Number: 3]


// <------------------------ Функции-конструкторы --------------------->

// Это стандарт ES5, в стандарте ES6 у нас появились Классы 

// Такие функции у нас предназначены для конструирования объектов и создания множества подобных копий. В таких функциях нам не нужен return
// Функция-конструктор - с ее помощью мы можем создавать объекты, с тему свойствами, которые мы указали, например новых пользователей:
function User(name, id){
    // присваиваем уникальное имя и ид при создании пользователя
    this.name = name;
    this.id = id;
    // свойство, которое будет общим для всех
    this.human = true;
    this.hello = function(){
        console.log(`Hello ${name}`);
    }
}

// внутри переменной иван у нас будет храниться не функция, а объект, потомоу что функция юзер у нас стала конструктором и теперь когда она вызывается при помощи new она создает новый объект с теми свойствами, которые мы ей записали
const ivan = new User('Ivan', 28);
const alex = new User('Alex', 20);

console.log(ivan); // = User { name: 'Ivan', id: 28, human: true, hello: [Function (anonymous)] }
console.log(alex); // = User { name: 'Alex', id: 20, human: true, hello: [Function (anonymous)] }

ivan.hello(); //  Hello Ivan

alex.hello(); // Hello Alex


// <----------------- Prototype ----------------->

// При помощи prototype мы можем добавлять новые методы и свойства в конструктор и они будут прототивно наследоваться у потовков
// Он используется, когда у нас нету доступа к нашему прототипу или мы его не можем менять по каким-то причинам, но его нужно модифицировать, т.е. добавить каких-то дополнительных плюшек

// добавим пользователю метод exit, который тут же и опишем
User.prototype.exit = function(){
    console.log(`Пользователь ${this.name} ушел`);
};

ivan.exit(); // Пользователь Ivan ушел