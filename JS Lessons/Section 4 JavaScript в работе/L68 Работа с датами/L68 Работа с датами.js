"use strict";

// <----------------------------------- Даты ------------------------------------>

// Даты можно использовать во многих вещах, например для измерения времени работы с какой-то функцией. Либо выпода текущей даты, для хранения времени создания или изменения како-то документа

// new Date();
// new Date(value);
// new Date(dateString);
// new Date(year, month[, day[, hour[, minute[, second[, millisecond]]]]]);

// 1) создаем конструктор даты. () не заполняем, чтобы отобразилась текущая дата, обычно она берется из системы
const now = new Date();
console.log(now); // = 2022-06-18T11:39:59.593Z
// год-месяц-деньT(разделитель)время

// 2) при создание объекта мы можем передавать разные аргументы
// Передать дату в виде строки
const date = new Date('2022-06-18');
console.log(date); // = 2022-06-18T00:00:00.000Z

// 3) Мы можем четко настраивать нашу дату передавая определенный параметры
// в таком же порядке: год, месяц, день, часы, минуты, секунду, миллисек

const datee = new Date(2022, 6, 1, 13, 13);
console.log(datee); // 2022-07-01T10:13:00.000Z
// 07 месяц, а не 6, потому что месяцы в дате считаются с нуля, т.е. 6 = 7
// Время другое, так как учитываются часовые пояса

// 4) Кроме строки и прямых аргументов мы можем так же передать миллисек, которые так же будут превращены в дату
// Любая дата в JS хранится в миллисек и считается с 1970 года, если нужно меньше, то ставим - 
const dt = new Date(0);
console.log(dt); // = 1970-01-01T00:00:00.000Z

// <--------------------------- Методы объекта Date -------------------------------->

// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Date

// Основные методы:
// 1) Получение компонентов даты

const currentDate = new Date();
console.log(currentDate); // = 2022-06-18T12:18:30.664Z
console.log(currentDate.getFullYear()); // = 2022
console.log(currentDate.getMonth()); // = 5
console.log(currentDate.getDate()); // = 18
console.log(currentDate.getDay()); // = 6 (день недели)
console.log(currentDate.getHours()); // = 15
console.log(currentDate.getMinutes()); // = 18
// и т.д.

// 2) UTC - когда нам нужен часовой пояс +0

console.log(currentDate.getHours()); // 15 - местное время
console.log(currentDate.getUTCHours()); // 12 - по UTC

// 3) getTime / getTimezoneOffset

// getTimezoneOffset - получает разницу между местным часовым поясом и UTC (разница в минутах)
const cd = new Date();
console.log(cd.getTimezoneOffset()); // = -180 (три часа)

// getTime - возвращает timestamp (количество миллисек прошедших с 1 января 1970г.)
console.log(cd.getTime()); // = 1655555011732
// это число можно обратно превратить в дату, если мы его поместим в Date(сюда)

// 4) Set'еры - установка даты, используются все те же методы, что мы использовали с приставкой get

const time = new Date();
console.log(time.setHours(18)); 
console.log(time); // 2022-06-18T15:25:29.852Z
// 15 а не 18 потому что это особенности консоли разработчика, так как она не ориентируется на наши локальные данные, которые есть в компьютере, она ориентируется на UTC зону. Если запустить через браузер, то все будет правильно

// Особенность Set в том, что мы можем передавать сразу несколько аргументов, например
console.log(time.setHours(18, 20)); 
// сначала мы передаем часы, а затем минуты

// 5) Автоисправление

// если мы установим 40 часов, то тогда оставшиеся часы перебросятся и нам будет отображаться следующий день с оставшимся временем
console.log(time.setHours(40)); 


// ! 6) Parse
const parseDate = new Date('2022-06-18'); // создастся дата с такими параметрами
// есть альтернативный синтаксис, который позволяет точно такие же операции выполнять
new Date.parse('2022-06-18'); // конструкция отдаст точно такое значение, что и выше
// Разница в том, что во 2 случае мы используем метод, чтобы спарсить строку в объект даты, а в 1 происходит автоматически, они ничем не отличаются


// 7) Использование для измерения какого-то времени

let start = new Date();

for (let i = 0; i < 20000000; i++){
    let some = i ** 3; // какое-то действие, которое нагружает систему   
}

let end = new Date();
// вывод в браузер
alert(`Цикл отработал за ${end - start} миллисек`); // Цикл отработал за 18 миллисек