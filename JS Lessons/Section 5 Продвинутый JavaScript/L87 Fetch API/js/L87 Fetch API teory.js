
// <-------------------------------- API -------------------------------->

// API (application programic interface) - набор данных и возможностей, который предоставляет нам какое-то готовое решение.
// Самое главное, что API это такое обобщающее понятие, которая нам говорит, что нам предоставляют готовые какие-то методы и свойства, которые мы можем использовать.

// Самое банальное API которое мы встречали называется DOM API
// DOM API - различные готовые методы, которые позволяют нам работать с элементами на странице. Например мы обращаемся к document и у него есть метод querySelector. Эта возможность уже встроена в браузер и получается нам уже предоставляют возможность для того, чтобы мы их могли использовать.

// Мы точно так же можем использовать и стороонние возможности, например Google maps API, соответсвенно гугл дает возможность нам работать с их картами, как-то их модифицировать, добавлять какое-то поведение и т.р., тоже самое есть у яндекс карт, у каких-то других библиотер.

// <------------------------------- Fetch API ------------------------------->


// Fetch API - технология, которая позволяет общаться с сервером. Она уже встроена в браузер и построена на промисах.
// https://learn.javascript.ru/fetch

// Для того, чтобы использовать Fetch нам необходимо лишь прописать в нашем коде команду fetch и раскрыть круглые скобки
// в куглых скобках указываем путь, к которому мы делаем запрос. Если не указывать дополнительные параметры, то это у нас будет обычный GET запрос, который просто получит данные из url. Если нам требуется другой запрос - прописываем настройки

// url – URL для отправки запроса.
// options – дополнительные параметры (передаются в виде объекта): метод, заголовки и так далее.
let promise = fetch(url, {options});

// Объект настроек содержит довольно много свойств, но самыми обязатальными являются только 2
// Свойства объекта настроек:
// 1. 


// Методы fetch:
// 1. .json() - этот метод возьмет и превратит данные в формате json в обычный объект, который в дальнейшем можно использовать. (тоже самое, что и JSON.parse). Но здесь есть одна важная особенность, данный метод возвращает нам ПРОМИС для того, чтобы построить дальше цепочку промисов. Если объект успешно преобразовался, то дальше выполняется then, получаем обычный объект и можем с ним дальше работать
// 2. .text() - читает ответ и возвращает как обычный текст,
// 3. .formData() - возвращает ответ как объект FormData (разберём его в следующей главе)
// 4. .blob() – возвращает объект как Blob (бинарные данные с типом)
// 5. .arrayBuffer() – возвращает ответ как ArrayBuffer (низкоуровневое представление бинарных данных https://learn.javascript.ru/arraybuffer-binary-arrays)
// 6. .body – это объект ReadableStream, с помощью которого можно считывать тело запроса по частям. 


// <========================= Fetch GET ===============================>
// Получение данных с сервера

// Пример GET:
// Разберем самый простой вариант, когда мы делаем GET запрос, получаем данные и как-то их обрабатываем. Нам понадобится url, куда мы будем посылать запросы, для этого воспользуемся JsonPlaceholder - это фейковый оналйн REST API для тестирования.
// https://jsonplaceholder.typicode.com

// Из данной конструкции нам вернется промис. Когда нам возращается промис из какой-то функции или из какой-то переменной, в которую обернута функция, то мы можем его обработать при помощи цепочки than и catch.
fetch('https://jsonplaceholder.typicode.com/todos/1')
 // получаем какой-то response (т.е. ответ), при чем получаем его в формате json. Для того чтобы использовать полученый json объект в дальнейшем, трансформируем его в объект. Для этого мы бы могли прописать JSON.parse, но у fetch уже есть возможности это сделать
  .then(response => response.json()) // = получаем json объект в виде промиса (чтобы в дальнейшем использовать цепочку промисов), и парсим его
  .then(json => console.log(json)); // = получаем объект с данными и выводим его

// <========================= Fetch POST ===============================>
// Пример POST

// Если нам требуется отправить данные на сервер, то нам необходимо добавить настройки для нашего fetch, ставим запятую и помещаем объект с настроками, которые мы будем задавать. Этот объект содержит довольно много различных свойств

// выбираем на сайте jsonplaceholder куда мы будем отправлять данные (в нашем случае выбрано в posts) и прописываем его вместо todos/1. 
fetch('https://jsonplaceholder.typicode.com/posts', {
    // устанавливаем метод POST
    method: 'POST',
    // дальше нам следует отправить какой-то body (так как в данный момент мы будем работать с jsonplaceholder, нам необходимо отправить json данные)
    body: JSON.stringify({name: 'Alex'}), // объект превратится в JSON формат и мы его отправим при помощи fetch
    // далее желательно указывать заголовки, которые будут определять какой контент мы отправляем
    headers: {
        'Content-type': 'application/json'
    }
})
.then(response => response.json())
.then(json => console.log(json)); // {name: "Alex", id: 101} (101 значит, что у меня есть 101 запись, которам поместилась в базу данных, в posts всего 100 постов было до этого)
