'use strict';

const box = document.getElementById('box'),
      btns = document.getElementsByTagName('button'),
      circles = document.getElementsByClassName('circle'),
      hearts = document.querySelectorAll('heart'),
      wrapper = document.querySelector('.wrapper'),
      oneHeart = wrapper.querySelector('.heart');





// <--------------- Работа с inline стилями ------------>     
// неважно что написано в css, inline истили всегда будут главнее

console.dir(box);
// получаем элемент в качестве объекта
//                  можно писать как hex, rgb 
box.style.backgroundColor = 'blue';
// обязательно в виде строки с px
box.style.width = '500px';

// обращаемся ко 2 кнопке пвсевдомассива
btns[1].style.borderRadius = '100%';

// если мы хотим обратиться к элементу, то мы обязательно должны прописывать элемент, иначе мы обращаемся к псевдомассиву, а у него нету методов, ему без разницы что такое style и т.д., это просто структура, которая содержит элементы
circles.style.backgroundColor = 'red'; // - ошибка
circles[0].style.backgroundColor = 'red'; 

// <!!!!!!!  Задача сразу нескольких стилей !!!!!!!!!>
// для этого у нас есть свойство text. Мы можем передавать стили в качестве теста

// дальше просто записываем в качестве строки те значения, которые хотям поместить в inline стили
box.style.cssText = 'background-color: blue ; widht: 500px'; // - все работает
// так же мы можем сюда поставлять какие-либо переменные
let px = 500;
box.style.cssText = `background-color: blue ; widht: ${px}px`;

// <!!!! Задача стилей сразу нескольким элементам !!!!!!>

// 1) используя for

for (let i = 0; i < hearts.length; i++){
    hearts[i].style.backgroundColor = 'blue';
}

// 2) используя forEach
// 1 аргумент это элемент, 2 - номер по порядку, 3 - ссылку на масив, который перебираем, по умолчанию берет тот, к которому обращаемся
hearts.forEach(item => {
    item.style.backgroundColor = 'blue';
});

// <--------------- Работа с css стилями ------------>    

// ClassList - удаление, добавление, переключение, проверка на содержимое или даже определение количества примененных классов к элементу
// берем, например div, прописываем класслист, далее прописываем метод, который мы будем использовать
div.classList.add('black'); // добавляем класс, который у нас есть в ксс стилях для div
// данный див хранится у нас пока в js файле и нигде на странице не размещен, он пока не имет к ней отношения


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <-------------- Современные методы для работы на странице ------------>

// >----- Добавление элемента на страницу ------<

// 1) append - вставлет в конец родителя какой-то элемент
// добавим наш див, который мы описали выше в конец body
document.body.append(div); // в конце баде будет расположен div с классом black

// мы можем вставит ьего в любого родителя, для этого нам нужно его получить, а затем во внутрь использовать append
document.querySelector('wrapper').append(div);

// 2) prepend - в начало родителя элемент
wrapper.prepend(div);

// 3) before и after (втавить перед или после)

hearts[0].before(div); // перед 0 элементом hearts поставится div
hearts[0].after(div); // после


// >----- Удаление элемента со страницы ------<

// 1) remove - удалить элемент со страницы
circles[0].remove();

// 2) replaceWith - заменить элемент другим
// сначала указываем какой элемент хотим заменить, метод, в скобках каким элементом ходим заменить
hearts[0].replaceWith(circles[0]); // сердечко заменяем кружком 


// <-----------------  Создание элементов -------------------->

// в скобках мы должны поместить название элемента, который хотим создать и он будет существовать только внутри JS файла, на странице он никак не появится
const div = document.createElement('div');

// <------------------- Изменение содержания элементов ------------->
// допустим мы хотим поместить в наш элемент какой-то текст

// 1) innerHTML - можем вставлять не только текст, но и html структуры
div.innerHTML = 'Hello World';
div.innerHTML = "<h1>Hello World</h1>";

// 2) textContent (устарневший), но хоть и устаревший, если нам нужно вписать ТОЛЬКО текст, но нужно использовать его, иначе пользователь может встать html теги и поломать нам верстку, либо какой-то сторонний скрипт
div.textContent = 'Hello world';

// 3) insertAdjacentHTML = Вставить кусочек html кода перед или после определенных тегов. Принимает 2 аргумента: 1- специальное слово (afterbegin, afterend, beforebegin, beforeend), 2 - html, который мы хотим вставить, либо текст
// beforebegin - вставить непосредственно перед элементом
// afterbegin - в начало элемента
// beforeend - перед концом
// afterend - после конца
div.insertAdjacentHTML('beforebegin','<h1>Hello</h1>')

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <-------------- Устаревшие методы для работы на странице ------------>

// appendChild - происходит тоже самое, что и с append
wrapper.appendChild(div);

// InsertBefore - вставить перед
// принимает в себя 2 аргумента, 1 - какой элемент вставляем, 2 - перед каким
wrapper.insertBefore(div, hearts[0]);

// раньше не существовало метода remove, только removeChild 
wrapper.removeChild(hearts[1]);

// раньше не было метода replaceWith, только replaceChild, 1 аргумент - тот, на который хотим поменять, 2 - на который меняется
wrapper.replaceChild(circles[0], hearts[0]);