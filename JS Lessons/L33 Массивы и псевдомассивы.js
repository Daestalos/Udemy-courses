
// шпаргалка
// https://drive.google.com/file/d/17D4THU5-UJtzihybKVjSDHeX67pz3xLR/view

"use strict";

// <----------------------Массив-------------------->

// Массивы
// Разновидность объектов с элементами по порядку

// ler arr = ['1',{},[],25];
// arr[0] == '1';
// arr[2] == []

// Методы массивов:
// arr.push('a') - добавляет элемент в конец массива
// arr.pop() - удаляет последний элемент из массива и возвращает его
// arr.shift() - удаляет из массива первый элемент и возвращает его
// arr.unshift('a') - добавляет элемент в начало массива
// arr.split(s) - превращает строку в массив, s - разделитель
// arr.join(s) - превращает массив в строку, s - разделитель
// delete arr[1] - удаляет второй элемент
// arr.splice (index, count, elem1....) - удалить count элементов, начиная
// с index и заменить на эелемены elem1....
// arr.splice(begin, end) - копирует часть массив с bedin до end не включая
// arr.sort(fn) - сортировка массива. Если не передать функцию сравления - сортирует
// элементы как строки
// arr.reverse() - меняет порядок элементов на обратный
// arr.concat(item1....) - создает новый массив, в который копируются элементы из arr,
// а так же item1

// Методы перебора:
// arr.forEach - просто перебирает
// arr.map - вернет новый массив, элементы модифицированны
// arr.every/some
// arr.filter - отфильтровывает массив, по тому критерию, который мы зададим (только четные, только строка и т.д.)
// arr.reduce

const arr = [1, 2, 3, 31, 6, 8];

arr[99] = 0;  /// ТАК ДЕЛАТЬ НЕЛЬЗЯ!!!!!!!!!!!!!!!!!!!!!!

console.log(arr.length);
console.log(arr); // = [ 1, 2, 3, 6, 8, <94 empty items>, 0 ] вот почему.

arr.pop(); // удаляет последний эл из массива
console.log(arr);

arr.push(10); // добавляет элемент в конец массива
console.log(arr);


// <----------------------------Сортировка массива----------------------------->

const str = prompt('', '');
const products = str.split(', '); // яблоко, сыр, молоко   например
// console.log(products);
products.sort(); // sort - сортирует как строки.
console.log(products.join('; '));


const massiv = [1, 33, 41, 12, 54, 2, 56];
console.log(massiv.sort());  // = 1, 12,  2, 33, 41, 54, 56, т.к сравнивает как строки

// метод sort использует алгоритм быстрой сортировки
// передаем в метод sort функцию compareNum, чтобы отсортировать верно
massiv.sort(compareNum);

// для сортировки значений (чисел) можно использовать данную функцию, при чем при замене a-b на b-a массив
// будет осортирован в порядке убывания
// так же данную функцию можем записывать в виде map
// massiv.map( (a,b) => return a-b;), но при этом map вернет нам новый массив, а не изменит существующий
function compareNum(a, b)
{
    return a - b;
}

console.log(massiv);


// <--------------------Перебор элементов массива-------------------------->

const array = [1, 2, 3 , 6, 8];
// метод forEach проходится по каждому эллементу массива
// функция будет выполняться каждый раз для каждого элемента массива.
// функция может принимать 3 аргумента, 1: 
//это сами элементы,
// 2: номер по порядку
// 3: ссылка на массив, который мы перебираем
// данная функция является callback функцией. (сначала ForEach, а потом Callback)
array.forEach(function(item, i, array){
    console.log(`${i}: ${item} внутри массива ${array}`);
    // = 0: 1 внутри массива 1,2,3,6,8      и т.д.
});

// перебор элементов массива
for (let i = 0; i < array.length; i++){
    console.log(array[i]);
}

// можем использовать break и continue, в отличии от forEach, они там не сработают.
for (let value of array){
    console.log(value);
}

//////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\
/////// ПСЕВДОМАСИВ!!!!!!!!!!!!!
// Структура всевдомассива совпадает со структурой обычного массива,
// он выглядит точно так же
// разница в том, что у него не будет методов (ForEach, pop и т.д.),
// это просто структура, которая хранит данные по порядку.



