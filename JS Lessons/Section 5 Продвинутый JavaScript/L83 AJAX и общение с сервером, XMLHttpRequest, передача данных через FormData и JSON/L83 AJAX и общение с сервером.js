
// Ассинхронное выполнение задач на странице и общение с сервером

// <------------------------------------------- AJAX ---------------------------------------------->

// Asynchronous JavaScript and XML — асинхронный JavaScript и XML

// Чтобы наша страница умела общаться с сервером - нам нужны HTTP запросы, которые мы можем отправлять, запрашивать, постить и выполнять другие операции. Чтобы это все происходило асинхронно (без перезагрузки страницы) нам и нужна технология AJAX

// Пример:
// Например у нас есть страница интернет-магазина на которой есть фильтры. При нажатии на фильтр страница не перезагружается, а перезагружаются лишь блоки с товарами, точнее блок, который нас действительно интересует. Клиент делает запрос к серверу и получает от него лишь часть страницы, которая необходима нам по каким-либо параметрам (например по фильтру), при этом весь остальной интерфейс не обновляется, он остается

// Плюсы:
// 1. Это удобно
// 2. Ускорение реакции интерфейса, т.е. мы не перезагружаем каждый раз страничку, а обновляем часть контента
// 3. Уменьшаем нагрузку на сервер и экономим трафик пользователя

// Минусы:
// При плохом качестве соединения с интернетом может проявлятсья некорректное поведение. Что-то может не подгрузиться или подвиснуть


// !!Создадим небольшой калькулятор валют, где курс нам будет приходить с сервера

// Есть несколько методов для реализации:
// 1)
// >>>>------------------------------ XMLHttpRequest --------------------------------<<<<

// https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest
// https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest

// !!!!!!!!!!Не акруален на данный момент, но может встречаться в старый проектах

'use strict';

// возьмем поля со страницы
const inputRub = document.querySelector('#rub'),
      inputUSD = document.querySelector('#usd');

// используем событие change (возникает, когда объект выходит из фокуса), в отличии от input    , который возникает в момент изменения объекта
inputRub.addEventListener('input', ()=>{

    // создаем экземпляр класса
    const request = new XMLHttpRequest();
    
    // применим методы XMLHttpRequest:
    // 1) Метод open - собирает настройки, которые помогут в будущем сделать запрос, принимает в себя несколько аргументов:
    // 1 - метод (GET, POST и т.д.)
    // 2 - путь к нашему серверу, т.е. куда мы будем посылать запросы (это можем быть файлик, может быть что угодно). !!! Запросы мы посылаем из HTML файла (именно страничка у нас открывается в браузере и из нее посылаются скрипты, поэтому мы должны формировать путь относительно нашей страницы)
    // 3 - асинхронность по умолчанию стоит true и если нам тремуется изменить поведение, то мы можем установить этот аргумент как false (Синхронный - функции выполняются друг за другом, Асинхронный - противоположность синхронного, функции не ждут выполнения других)
    // 4 - логин
    // 5 - пароль
    // request.open(method, url, async, login, pass);
    request.open('GET', 'current.json');


    // 2) Метод setRequestHeader
    // Когда мы отправляем запрос мы должны сказать так же А что именно мы отправляем, какая-то информация, в чем она закодировнаа и т.д.. Делается это для того, чтобы наши трансферные протоколы четко понимали что мы передаем и когда они приходят к серверу, сервер точно понимал что он принимает в себя, это json файл или какие-то изображения и т.п.
    // Для всего этого существуют HTTP-заголовки
    // https://ru.wikipedia.org/wiki/Заголовки_HTTP

    // мы говорим, что у нас есть тип контента, указываем какой тип и какую кодировку будем использовать
    request.setRequestHeader('Content-type', 'application/json; charset=uth-8');

    // 3) Метод send - отправить запрос
    // Этот метод будет отличаться в зависимости от того какой метод мы используем. Если мы используем GET, то это значит, что мы ничего не отправляем, если же мы используем POST, то мы отправляем какие-либо данные, соответственно метод send может принимать какой-то аргумент, те данные, которые уходят на сервер. В GET аргумента не будет
    request.send();

    // Свойства XMLHttpRequest:
    // 1) Свойство status - показываем и отображает статус нашего запроса(404, 0, 200, 403 и т.д.)
    // https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP

    // 2) Свойство statusText - текстовое описание ответа от сервера (ok, not found и т.д.)

    // 3) Свойство response - ответ от сервера
    
    // 4) Свойство readyState - текущее состояние нашего запроса
    // https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest/readyState

    // События XMLHttpRequest:
    // 1) readystatechanges - отслеживает статус текущего запроса в данный текущий момент
    request.addEventListener('readystatechange', ()=>{
        // Когда у нас изменяется readyState срабатывает это событие (каждый раз)
        if (request.readyState === 4 && request.status === 200) {
            // если запрос загружен и статус 200 выполняем действия
            console.log(request.response); // получили результат и вывели его в консоль
            // = 
            // {
            //  "current": {
            //     "usd": 74
            //     }
            // }
            
            // переводим объект для работы с ним
            const data = JSON.parse(request.response);

            // рассчитываем курс валют (округляем до 2 значений после ,)
            inputUSD.value = (+inputRub.value / data.current.usd).toFixed(2);

        } else {
            // Если что-то сломалось обязательно всегда оповещаем!
            inputUSD.value = 'Что-то пошло не так';
        }  
        
    });

    // 2) load - срабатывает только один раз когда наш запрос полностью загрузился и мы получили какой-то результат (готов =/ завершен успешно, он так же может выдать ошибку)

    request.addEventListener('load', ()=>{
        // Убираем readyState, потому что он уже не отслеживается, но оставляем статус. Данный код будет точно так же работать, что и выше
        if (request.status === 200) {
            // если запрос загружен и статус 200 выполняем действия
            console.log(request.response); // получили результат и вывели его в консоль
            // = 
            // {
            //  "current": {
            //     "usd": 74
            //     }
            // }
            
            // переводим объект для работы с ним
            const data = JSON.parse(request.response);

            // рассчитываем курс валют (округляем до 2 значений после ,)
            inputUSD.value = (+inputRub.value / data.current.usd).toFixed(2);

        } else {
            // Если что-то сломалось обязательно всегда оповещаем!
            inputUSD.value = 'Что-то пошло не так';
        }  
        
    });

    

});


// <------------------------------------ FormData -------------------------------------->

// FormData - специальный объект, который позволяет с определенной формы быстро сформировать заполненные пользователем данные, при чем формируется точно так же: формат, ключ, значение

// создадим переменную для форм
const forms = document.querySelectorAll('form');

// создаем переменную formData, передаем экземпляр класса FormData и указываем из какой формы брать данные
const formData = new FormData(forms);

// Пример с использование XMLHttpRequest

    // используем нашу переменную forms

    // функция отправки данных
    function postData(form){
        // submit срабатывает каждый раз, когда пытаемся отправить какую-то форму
        form.addEventListener('submit', (e)=>{
            // отменяем стандартное поведение браузера
            e.preventDefauld();

            // создаем экземпляр класса
            const request = new XMLHttpRequest();
            // создаем настройки для запроса
            request.open('POST', 'server.php');

            // Передача данных, которые пользователь заполнил на форме через FormData

        
            // FormData - специальный объект, который позволяет с определенной формы быстро сформировать заполненные пользователем данные, при чем формируется точно так же: формат, ключ, значение

            // создаем переменную formData, передаем экземпляр класса FormData и указываем из какой формы брать данные

            // !!!! Если мы подразумеваем, что данные будут идти на сервер, то абсолютно всегда мы ОБЯЗАНЫ элементу input задавать атрибут name, иначе FormData не найти инпут и взять с него value

            // Когда мы используем связку XMLHttpRequest и FormData нам заголовок (setRequestHeader) устанавливать не нужно, он устанавливается автоматически
            // request.setRequestHeader('Content-type', 'multipart/form-data')
            const formData = new FormData(form);

            // отправляем данные
            request.send(formData);

            request.addEventListener('load', ()=>{
                // проверяем, что запрос успешно отправлен
                if (request.status === 200){
                    console.log(request.response);
                }
            });
        });
    }


// <----------------------------------------------- FormData и JSON ---------------------------------------------------->

// В отличии от FormData, если нам для сервера нужен JSON - заголовок нужен
// request.setRequestHeader('Content-type', 'application/json; charset=uth-8');

// перепишем функцию выше под формат для работы с FormData и JSON

function postData(form){
    // submit срабатывает каждый раз, когда пытаемся отправить какую-то форму
    form.addEventListener('submit', (e)=>{
        // отменяем стандартное поведение браузера
        e.preventDefauld();

        // создаем экземпляр класса
        const request = new XMLHttpRequest();
        // создаем настройки для запроса
        request.open('POST', 'server.php');

        // задаем заголов для запроса
        request.setRequestHeader('Content-type', 'application/json; charset=uth-8');
        const formData = new FormData(form);

        // !!FormData это специфичный объект, мы просто так не можем его прогнать в другой формат, для этого нам нужно воспользоваться одним приемом, который часто используется

        // создадим объект в который будем записывать данный с formData
        const object = {};
        // переберем FormData при помощи цикла forEach (он хранит в себе массив с данными) и запишем в object
        formData.forEach((value,key) =>{
            object[key] = value;
        })

        // после того как получили обычные данные, а не FormData мы можем использовать конвертацию в JSON

        // превращаем обычный объект в JSON
        const json = JSON.stringify(object);

        // помещаем json с данными для отправки в send
        request.send(json);

        request.addEventListener('load', ()=>{
            // проверяем, что запрос успешно отправлен
            if (request.status === 200){
                console.log(request.response);
            }
        });
    });
}
