'use strict';

// window - по факту это окно, в котором у нас отображается наш документ
// screen - весь наш видимый монитор (на практике редко понадобится)

// для понимания что тут происходит:
// https://drive.google.com/file/d/1eTxWzmaDfN0CXHC7Dv_AE39A1GlNO1nI/view
// Элементы на странице имеют много разных параметров
// все они измеряются в пикселях, но в коде JS пишутся без приписки 'px' как со стилями

// <---------------------- clientHeight и clientWidth ---------------------->
// если нам нужно получить ширину и высоду, включая padding, но без border и прокрутки, то можно использовать такие свойства, как  clientHeight и clientWidth
const box = document.querySelector('.box'),
      btn = document.querySelector('button');

const width = box.clientWidth;
const height = box.clientHeight;
console.log(`clientWidth ${width}, clientHeight ${height}`); 
// 405 и 350 - 15 пикселей занимает скролл

// <---------------------- offsetWidth и OffsetHeight -------------------->

const widthh = box.offsetWidth;
const heightt = box.offsetHeight;
console.log(`offsetWidth ${widthh}, offsetHeight ${heightt}`); 
 
// <---------------------- scrollWidth и scrollHeight -------------------->
// позвоняет получить всю высоту или ширину с учетом прокрутки

const widthhh = box.scrollWidth;
const heighttt = box.scrollHeight;
console.log(`scrollWidth ${widthhh}, scrollHeight ${heighttt}`); 
// 385 1385

// например нам нужно при нажатии на кнопку раскрыть элемент и показать все что находится в прокрутке
btn.addEventListener('click', ()=>{
    // установим высоту box с учетом прокрутки
    box.style.height = box.scrollHeight + 'px';
});

// <----------------------------  scrollTop / scrollLeft ------------------------->
// помогает узнать сколько у нас есть "проскроленного" контента, который не показывается
// Именно благодаря этому можно например показывать прогресс пользователя, насколько он уже пролистал текст и т.д.
const scrlTop = box.scrollTop;

// Данный значения могут быть модифицированны 

btn.addEventListener('click', ()=>{
    // нажав на кнопку покажется сколько теста уже прочитано, точнее сколько проскроленно
    console.log(box.scrollTop);
});


// <------ Получение координат элемента на старнице / getBoundingClientRect ----->

// !! координаты в JS начинаются в левом верхнем углу экрана, не как в CSS

// Метод для получения всех координат элемента:
console.log(box.getBoundingClientRect()); // = DOMRect {x: 251, y: 50, width: 400, height: 350, top: 50, width: 400, x:640, y:50}

// так как это объект, то у него есть и методы
console.log(box.getBoundingClientRect().top); // получим значение только топа

// <----- Получение стилей, которые уже были применены к элементу при помощи CSS --->

// Пример: мы пишем какой-то скрипт и нам критически важно знать показан ли элемент на странице сейчас или нет, никаких скриптов к нему еще не применяли, на нем прописан только CSS стиль, который прописан в нужном нам файле. Нам нужно определить стоит ли какой-то display у этого элемента и на основании этого при помощи условия сформировать нашу структуру
// Для этого существует метод getComputedStyle()
// в спобках задаем тот этомент, который нас интересует
const style = window.getComputedStyle(box);
console.log(style); // получаем огромный объект, в котором видем все ComputedStyle, которые применились к элементу

// Если нас интересует какое-то конкретное свойство из всех примененных, то пишем его через .
console.log(style.display); // = block
// теперь мы можем отталкиваться от этого значения и что-то в будущем делать

// !! При помощи этого метода мы можем получить стили псевдоэлементов (В JS нельзя работать с превдоэлементами и получить их, но вот их стили получить можно, для этого нам стоит указать 2 аргумент (псевдоэлемент, который относится к 1 аргументу))

// !! Computed Style != Inline Style . Эти стили идут из CSS и изначально появляются на странице, .style - это уже inline стили 


// <-------------------------- document и window ------------------------->

console.log(document.documentElement.clientHeight); // получаем количество пикселей, которые отлистал пользователь

let scrollT = document.documentElement.scrollTop = 0; // якорь, которые перемещает страницу наверх