
// В основной мы всегда объявляем подключение скриптов в конце страницы, но если мы объявим подключение до объявления элементов, то они будут блокировать обработку страницы

// Пример: у нас стоит querySelector элемента, но скрипт в html стоит до объявления данного элемента, а таком случае у нас не выйдет получить элемент, мы получим псевдомассив и он будет пустым


// <-------------------------------- defer ---------------------------------->

// defer - этот атрибус сообщает браузеру, что он должен продолжать обработовать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда он загрузится 
// Особенности атрибута:
// 1) Cкрипты с defer никогда не блокируют страницу
// 2) Скрипты с таким атрибутом всегда у нас выполняются, когда наше DOM-дерево готово

// скрипт у нас находится не в конце html, а до того как элементы были объявлены
// html

// сначала загрузится все Dom-дерево
// затем script.js
// затем test.js
<body>
    <sctipt defer sct='js/script.js'></sctipt>
    <sctipt defer sct='js/test.js'></sctipt>
    <p>22</p>
    <p>11</p>
</body>
// js
 let p = document.querySelectorAll('p'); // NodeList(2) [p,p]


// Зачем это нужно?
// Так соблюдается порядок всех подключенных утилит и мы точно уверены, что наша страница готова


// <------------------------------- Async --------------------------->

// Особенности атрибута:
// 1) страница не ждем ассинхронных скриптов, содержимое просто обрабатывается и отображается
// 2) События DOMContentLoaded и ассинхронные скрипты не ждут друг друга
// 3) Остальные скрипты не ждут Async и наоборот
// Если мы ставим атрибут async, то этот скрипт начинает сразу же загружаться, как только до него доходит страница, он загружается в фоновом режиме, но при этом запускается как только он был загружен. Он не ждет полной загрузки страницы

// В данном случае async не будет ждать загрузки всего DOM-дерева, если загрузится раньше
// Тот скрипт, который загрузится раньше - выполнится раньше
<body>
    <sctipt async sct='js/script.js'></sctipt> 
    <sctipt async sct='js/test.js'></sctipt>
    <p>22</p>
    <p>11</p>
</body>

// Зачем оно нужно?
// иногда мы будем подключать различные сторонник скрипты, которые не особо подвязаны к Dom-структуре, так и к другой функциональности, например метрики и счетчики, им главное уловить, что пользователь зашел на страницу

// Когда мы используем скрипты с anync, мы должны быть на всего 100% уверены, что данный скрипт не зависит от DOM-структуры, кроме того он должен не зависить от каких-то других скриптов


// <----------------- Динамические скрипты ------------------------>

// Динамические скрипты - скрипты, которые были динамически добавлены на страницу, например через код
// Динамически загружаемые скрипты по умолчанию ведут себя как Async

/* <body>
        <p>22</p>
        <p>11</p>

        <sctipt sct='js/script.js'></sctipt> 

    </body> 
*/

const sctipt = document.createElement('script');
sctipt.src = 'js/test.js';

sctipt.async = false; // отключает поведение скрипта в виде атрибута Async
document.body.append(script) // помещаем на страницу в конец body